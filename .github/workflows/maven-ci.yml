# This workflow will build and test a Java project with Maven.
# If the publish flag is set to true, the resulting package will eventually be deployed to https://oss.sonatype.org/

name: Building, Testing and Publishing a Maven Package

on:
  workflow_call:
    inputs:
      # Whether to publish the build artifact to https://oss.sonatype.org, defaults to true
      publish:
        required: false
        default: true
        type: boolean
      # The java version used for building the artifact, defaults to 8
      java-version:
        required: false
        default: 8
        type: number
      # The java distribution used for building the artifact, defaults to temurin
      java-distribution:
        required: false
        default: 'temurin'
        type: string
      # An optional list of command-line parameters, passed to all maven commands
      maven-command-line-parameters:
        required: false
        type: string
      # The artifact name, which should be used for uploading the target directory for other workflows
      artifact-name:
        required: false
        default: ''
        type: string

jobs:
  java-build-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v2

    - name: Setup Java for Building the Package
      uses: actions/setup-java@v2
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.java-distribution }}

    - name: Cache Local Maven Repo
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-${{ inputs.java-distribution }}-${{ inputs.java-version }}-maven-${{ matrix.maven_profile }}-${{ hashFiles('pom.xml') }}

    - name: Run the unit tests
      run: mvn --batch-mode ${{ inputs.maven-commandline-parameters }} test

      # Save the generated Maven Artifacts, for later processing in other steps
    - name: Save Package as Artifact
      if: ${{ inputs.artifact-name != '' }}
      uses: actions/upload-artifact@v2
      with:
        # TODO: Proper naming to uniquely identify every artifact
        name: ${{ inputs.artifact-name }}
        path: 'target'

    - name: Setup Java for Publishing the Package
      # Ensure, that only packages get pushed, that are derived from main or develop branch
      if: ${{ inputs.publish && (github.event_name != 'pull_request') }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.java-distribution }}
        server-id: ossrh
        # The environment variable that will contain maven username in next step
        server-username: MAVEN_USERNAME
        # The environment variable that will contain maven password in next step
        server-password: MAVEN_PASSWORD # The environment variable to read for maven password in next step
        # The private key to use for signing the artifact, export with
        #   gpg --list-secret-keys --keyid-format LONG
        #   gpg --export-secret-keys -a <id-of-the-private-key-you-want-to-use>
        gpg-private-key: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
        # The environment variable that will contain the gpg-passphrase for signing in the next step
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Publish the Package to https://oss.sonatype.org
      if: ${{ inputs.publish && (github.event_name != 'pull_request') }}
      run: |
        mvn --batch-mode -Dgpg.passphrase=$MAVEN_GPG_PASSPHRASE ${{ inputs.maven-commandline-parameters }} deploy
      env:
        # username from oauth2-access-token for https://oss.sonatype.org
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        # password from oauth2-access-token for https://oss.sonatype.org
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        # passphrase for the gpg-private-key added in the step "Setup Java for Publishing the Package"
        MAVEN_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
