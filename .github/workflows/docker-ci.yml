# A common workflow for building, testing and publishing docker images in the samply organization (see https://github.com/samply).
# Upon completion of this workflow, following actions will be taken:
# 1) Build the docker image using a Dockerfile in the source code (default is ./Dockerfile)
# 2) Scan the image for vulnerabilities with trivy (see https://github.com/aquasecurity/trivy)
# 3) Upload the scan results from step 2 to the github security tab of the repository
# 4) Generating appropriate image tags for publishing using the docker/metadata-action. Following Rules are applied:
#     1. Running the action on push to the main branch will trigger tagging image as latest
#     2. Running the action on push to a git branch trigger tagging image as "<branchname>"
#     3. Running the action on push of a git tag matching the semver schema will trigger tagging image with {MAJOR}, {MAJOR}.{MINOR} and {MAJOR}.{MINOR}.{PATCH}
#     4. Running the action on push to a pull request, will trigger tagging for the github container registry with ghcr.io/<repository-name>/<pr-reference>
#     5. Running the action on a scheduled basis will trigger tagging images with "nightly".
# 5) Rebuild the image for all necessary platforms an publish it based on the applied tags from 4.
#
# An usage example for this action is provided in the samply organization: https://github.com/samply/.github/blob/main/workflow-templates/docker-ci-template.yml

name: Build, Test and Deploy Docker Image

on:
  workflow_call:
    inputs:
      # The Docker Hub Repository you want eventually push to, e.g samply/share-client
      image-name:
        required: true
        type: string
      # Define special prefixes for docker tags
      image-tag-prefix:
        required: false
        type: string
      # Define the build context of your image, typically default '.' will be enough
      build-context:
        required: false
        type: string
        default: '.'
      # Define the Dockerfile of your image, typically default './Dockerfile' will be enough
      build-file:
        required: false
        type: string
        default: './Dockerfile'
      build-platforms:
        required: false
        type: string
        default: "linux/amd64,linux/arm64/v8"
      # A list of build arguments, passed to the docker build
      # FIXME: GitHub Actions currently doesn't support list types on inputs. This needs to be parsed by us from string.
      # build-args:
      #   required: false
      #   type: list
      # If your actions generate an artifact in a previous build step, you can tell this worflow to download it
      artifact-name:
        required: false
        type: string
        default: ''
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Download Previous Build Artifacts
        if: ${{ inputs.artifact-name != '' }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.artifact-name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Export to Docker
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.build-context }}
          file: ${{ inputs.build-file }}
          build-args: ${{ inputs.build-args }}
          # NOTE: Not specifying build platforms here due to conflict with the load option!
          load: true
          tags: ${{ inputs.image-name }}

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.image-name }}
          format: template
          template: '@/contrib/sarif.tpl'
          output: trivy-results.sarif

      - name: Upload Trivy Scan Results to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@codeql-bundle-20211208
        with:
          sarif_file: trivy-results.sarif

      - name: Define Image Tags for Github Container Registry
        id: docker-meta-ghcr
        uses: docker/metadata-action@v3
        with:
          images: |
            "ghcr.io/${{ inputs.image-name }}"
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,prefix=${{ inputs.image-tag-prefix }}pr-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long,prefix=${{ inputs.image-tag-prefix }}sha-
          flavor: |
            prefix=${{ inputs.image-tag-prefix }},onlatest=true

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image to Github Container Registry
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.build-context }}
          file: ${{ inputs.build-file }}
          push: true
          platforms: ${{ inputs.build-platforms }}
          build-args: ${{ inputs.build-args }}
          labels: ${{ steps.docker-meta-ghcr.outputs.labels }}
          tags: ${{ steps.docker-meta-ghcr.outputs.tags }}

      - name: Generate Image Tags for Docker Hub
        id: docker-meta
        uses: docker/metadata-action@v3
        if: github.event_name != 'pull_request'
        with:
          images: |
            ${{ inputs.image-name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          flavor: |
            prefix=${{ inputs.image-tag-prefix }},onlatest=true

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image to Docker Hub
        uses: docker/build-push-action@v2
        if: github.event_name != 'pull_request'
        with:
          context: ${{ inputs.build-context }}
          file: ${{ inputs.build-file }}
          push: true
          platforms: ${{ inputs.build-platforms }}
          build-args: ${{ inputs.build-args }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

